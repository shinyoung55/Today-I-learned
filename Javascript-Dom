제어대상을 항상 먼저 찾고, 그 제어대상을 변경하는 순서로 생각한다. 

*제어 대상을 찾는법

1. Document.getElementsByTagName : Tag Name으로 찾는다.

<ul>
    <li>HTML</li>
    <li>CSS</li>
    <li>JavaScript</li>
</ul>

<script>
  let lis = document.getElementsByTagName('li') // 모든 li tag 를 유사 배열안에 넣어 lis에 저장한다.
  for(i = 0; i < lis.length <i++) {
    lis[i].style.color = 'red'; 
  }
</script>

만약에 li 가 여러개이고 , 그중 ul 하위에 있는 li만 찾고 싶을때는?

<script>
 let ul = document.getElementsByTagName('li')[0]; // 먼저 제어대상인 li의 부모 element 인 ul을 찾고, 1번째 요소를 ul에 담아 준다.
 let lis = ul.getElementsByTagName('li')
 for(i=0; i<lis.length; i++) {
  lis[i].style.color ='red';
 }
</script>

2. document.getElementsByClassName: class로 제어대상을 찾는다.   

3. document.getElementById: 다른것과 다른점은 단수인데, id값 자체가 유일무이 하기 때문이다. (성능면에서 가장 우수하다)
4. document.querySelector/ document.querySelectorAll //가장 첫값 vs 모든 값

 let lis = document.querySelectorAll('.class');
  for (name in lis) {
    lis[name].style.color ="blue";
  }

# element를 제어하기 위해서는 먼저 제어를 원하는 element를 조회(Read)해 야되는데, 이 때 조회 하기 위해서 식별자가 필요하다. 

1. 식별자
  ## element.tagName : 해당 element의 tag이름을 읽는다. 설정하지는 못한다. (읽기 전용)
  ## element.id :해당 element 의 ID의 값을 읽는다. 설정도 가능하다. 
  ## element.classList : 해당 요서의 클래스를 유사배열로 return 해준다.
2. 조회 (조회 대상을 제한하는 법_예를 들어 어떤 element 의 child element 를 조회하고 싶을때
  #console.group('원하는 범위')
    let lis = document.getElementsByID('#target')
    let list = lis.getElementsByClassName('.marked')
    for(i=0; i < list.length ; i++) { 
      console.log(list[i].textContent) // 해당 element의 content를 보여준다. 
  console.groupEnd()
  # JQuery에서 범위 제한 === 'selector context' 
   1. $('#active.marked').css('color','red')
   2. $('#active').find('.marked').css('color','red')
     *why we use 'find' ? $('#active').css('color','blue').find('.marked').css('background', 'red') //먼저 id에 효과를 주고, 그다음 자식 element에 효과를 줄때.
3. 속성
 #element.getAttribute(name)  / $('#target').attr('href')
 #element.setAttribute(name,value) / $('#target').attr('href','google.com')
 #element.hasAttribute(name) / 
 #element.removeAttribute(name) / $('#target').removeAttr('href')

 *JQuery 는 property 는 prop 으로 사용한다. $('#target').prop('class','active')
 
 
 # NODE의 관계 API
 1. Node.childNodes
 2. Node.firstChild
 3. Node.lastChild
 4. Node.nextSibling
 # NODE 종류 API
 1. Node.nodeType
 2. Node.nodeName
 
 Setember, 1st 2020
 #form validation
 const form =document.getElementById('form'); // form 태그의 #값을 가져온다. 
 const errorElement = document.getElementById('error') // div#error 자리에 에러 메세지 삽입.
 const last = document.getElementById("last");
 const number = document.getElementById("number");
 
 form.addEventListner('submit', function(event) {
   let messge= [] ; // 빈 배열을 만들어 나중에 에러시 메세지를 push 해준다.
   if(last.value ==='' || last.value==null) {
     message.push('please write your last name')
   }
   
   if(number.value.length <= 8) {
     message.push('your number should be more than 8 digits')
   
   if(message.length > 0 ) {     // message length >0 이라는건 에러 메세지가 있다는 뜻이므로 에러의 요소가 있어 submit을 눌려도 진행 되지 않게 해야된다.
     event.preventDefault();
     errorElement.innerText = message.join(', ') div#error 자리에 해당 에러 메세지 삽입. 
   }
   
 });
 

